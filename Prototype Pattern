Prototype pattern is a creational design pattern. This means it handles the scenarios where we are creating objects. Why to use Prototype pattern you ask, well if object creation is expensive then cloning is better. There are couple of things that I got know during my inital learning:
1. As the name itself is suggesting, this pattern will have a "Prototype". This prototype is an abstract class which has a virtual method: clone().
2. There will be classes which will extend this prototype abstract class, and these classes are termed as Concrete Classes.
3. Now we will need a place where all these Concrete classes will be "saved", or we can say where we cn access these classes. This place can be thought of as Registry. When I see the implmentation of registry class, I see that we use clone() here in a method which will be used by the "client" to clone objects.
4. "Client" is actually a class where you need an object in Prototype design pattern. All you need to do is create object of Registry class and call the method which invokes the clone();
